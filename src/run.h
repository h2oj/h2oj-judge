/*
    This file is part of the Hydrogen OJ Judger.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* Copyright (C) 2020-2021 Alex Cui */

#ifndef _HOJ_JUDGER_RUN_H_
#define _HOJ_JUDGER_RUN_H_

#include <filesystem>
#include <string>

#include "sandbox.h"
#include "result.h"

namespace hoj {
    /*
     * Checker requirement:
     * Command: [checker-path] [input] [output] [answer]
     * Example: ./hoj-checker hello.in hello.out hello.ans
     * Arguments:
     *   checker-path: Your checker path.
     *   input: Input file. (Usually provided by problem)
     *   output: Output file. (Usually generated by program)
     *   answer: Answer file. (Usually provided by problem)
     * Return: a integer, see checker_result(result.h)
     */

    /*
     * Function: compile
     * Description: Compile in sandbox.
     * Params:
     *   sandbox_path[const std::filesystem::path &]: Path to sandbox.
     *   work_path[const std::filesystem::path &]: Path to work directory.
     *   command[const std::string &]: Command to run.
     *   source_file[const std::string &]: Source file name.
     *   exec_file[const std::string &]: Excutable file name.
     *   time_limit[int]: Time limit. (ms)
     *   space_limit[int]: Space limit. (Byte)
     * Return[hoj::sandbox_result]: The result of sandbox.
     */
    sandbox_result compile(
        const std::filesystem::path &sandbox_path,
        const std::filesystem::path &work_path,
        const std::string &command,
        const std::string &source_file,
        const std::string &exec_file,
        int time_limit,
        int space_limit
    );

    /*
     * Function: run
     * Description: Run in sandbox.
     * Params:
     *   sandbox_path[const std::filesystem::path &]: Path to sandbox.
     *   work_path[const std::filesystem::path &]: Path to work directory.
     *   command[const std::string &]: Command to run.
     *   source_file[const std::string &]: Source file name.
     *   exec_file[const std::string &]: Excutable file name.
     *   input[const std::filesystem::path &]: Input file path.
     *   output[const std::filesystem::path &]: Output file path.
     *   time_limit[int]: Time limit. (ms)
     *   space_limit[int]: Space limit. (Byte)
     * Return[hoj::sandbox_result]: The result of sandbox.
     */
    sandbox_result run(
        const std::filesystem::path &sandbox_path,
        const std::filesystem::path &work_path,
        const std::string &command,
        const std::string &source_file,
        const std::string &exec_file,
        const std::filesystem::path &input,
        const std::filesystem::path &output,
        int time_limit,
        int space_limit
    );

    sandbox_result compile_checker(
        const std::filesystem::path &sandbox_directory,
        const std::filesystem::path &source_directory,
        const std::string &source_name,
        const std::filesystem::path &binary_directory,
        const std::string &binary_name,
        const std::string &command,
        int time_limit,
        int space_limit
    );

    sandbox_result run_checker(
        const std::filesystem::path &sandbox_directory,
        const std::filesystem::path &checker_directory,
        const std::string &checker_name,
        const std::filesystem::path &working_directory,
        const std::filesystem::path &input_path,
        const std::filesystem::path &answer_path,
        const std::string &command,
        int time_limit, int space_limit
    );
}

#endif // _HOJ_JUDGER_RUN_H_
